/*
 * colormap.cc
 *
 *  Created on: Mar 18, 2022
 *      Author: amyznikov
 */
#include "colormap.h"
#include <core/ssprintf.h>
#include <core/debug.h>

template<>
const c_enum_member * members_of<COLORMAP>()
{
  static const c_enum_member members[] = {
      { COLORMAP_GRAYS, "GRAYS", "" },
      { COLORMAP_JET, "JET", "" },
      { COLORMAP_RAINBOW, "RAINBOW", "" },
      { COLORMAP_AUTUMN, "AUTUMN", "" },
      { COLORMAP_BONE, "BONE", "" },
      { COLORMAP_WINTER, "WINTER", "" },
      { COLORMAP_OCEAN, "OCEAN", "" },
      { COLORMAP_SUMMER, "SUMMER", "" },
      { COLORMAP_SPRING, "SPRING", "" },
      { COLORMAP_COOL, "COOL", "" },
      { COLORMAP_HSV, "HSV", "" },
      { COLORMAP_PINK, "PINK", "" },
      { COLORMAP_HOT, "HOT", "" },
      { COLORMAP_PARULA, "PARULA", "" },
      { COLORMAP_MAGMA, "MAGMA", "" },
      { COLORMAP_INFERNO, "INFERNO", "" },
      { COLORMAP_PLASMA, "PLASMA", "" },
      { COLORMAP_VIRIDIS, "VIRIDIS", "" },
      { COLORMAP_CIVIDIS, "CIVIDIS", "" },
      { COLORMAP_TWILIGHT, "TWILIGHT", "" },
      { COLORMAP_TWILIGHT_SHIFTED, "TWILIGHT_SHIFTED", "" },
      { COLORMAP_TURBO, "TURBO", "" },
#if HAVE_COLORMAP_DEEPGREEN
      { COLORMAP_DEEPGREEN, "DEEPGREEN", "" },
#endif // HAVE_COLORMAP_DEEPGREEN
      { COLORMAP_LACERTA, "LACERTA", "https://github.com/adrn/cmastro/blob/main/cmastro/cmaps/lacerta.csv"},
      { COLORMAP_NONE, "NONE", "" },
      { COLORMAP_NONE},
  };

  return members;
}


static constexpr struct {
  uint8_t b, g, r;
} lacerta[256] = {
    { 0 , 0 , 0 },
    { 11  , 0 , 3 },
    { 20  , 0 , 5 },
    { 26  , 1 , 6 },
    { 32  , 1 , 8 },
    { 36  , 1 , 9 },
    { 40  , 2 , 10  },
    { 44  , 2 , 11  },
    { 47  , 3 , 11  },
    { 50  , 4 , 12  },
    { 53  , 4 , 13  },
    { 56  , 5 , 13  },
    { 58  , 6 , 14  },
    { 60  , 6 , 14  },
    { 63  , 7 , 15  },
    { 65  , 8 , 15  },
    { 67  , 9 , 16  },
    { 68  , 9 , 16  },
    { 70  , 10  , 17  },
    { 72  , 11  , 17  },
    { 73  , 12  , 17  },
    { 75  , 13  , 18  },
    { 76  , 14  , 18  },
    { 78  , 15  , 18  },
    { 79  , 15  , 19  },
    { 80  , 16  , 19  },
    { 81  , 17  , 19  },
    { 83  , 18  , 20  },
    { 84  , 19  , 20  },
    { 85  , 20  , 20  },
    { 86  , 21  , 20  },
    { 87  , 22  , 21  },
    { 88  , 23  , 21  },
    { 89  , 24  , 21  },
    { 90  , 25  , 21  },
    { 91  , 26  , 22  },
    { 92  , 28  , 22  },
    { 93  , 29  , 22  },
    { 94  , 30  , 22  },
    { 94  , 31  , 23  },
    { 95  , 32  , 23  },
    { 96  , 33  , 23  },
    { 97  , 34  , 23  },
    { 97  , 35  , 24  },
    { 98  , 36  , 24  },
    { 98  , 38  , 24  },
    { 99  , 39  , 24  },
    { 100 , 40  , 24  },
    { 100 , 41  , 25  },
    { 101 , 42  , 25  },
    { 101 , 43  , 25  },
    { 101 , 44  , 25  },
    { 102 , 46  , 26  },
    { 102 , 47  , 26  },
    { 103 , 48  , 26  },
    { 103 , 49  , 26  },
    { 103 , 50  , 27  },
    { 104 , 51  , 27  },
    { 104 , 52  , 27  },
    { 104 , 54  , 27  },
    { 104 , 55  , 28  },
    { 105 , 56  , 28  },
    { 105 , 57  , 28  },
    { 105 , 58  , 28  },
    { 105 , 59  , 29  },
    { 105 , 61  , 29  },
    { 105 , 62  , 29  },
    { 106 , 63  , 29  },
    { 106 , 64  , 30  },
    { 106 , 65  , 30  },
    { 106 , 66  , 30  },
    { 106 , 68  , 30  },
    { 106 , 69  , 31  },
    { 106 , 70  , 31  },
    { 106 , 71  , 31  },
    { 106 , 72  , 32  },
    { 106 , 73  , 32  },
    { 106 , 74  , 32  },
    { 106 , 76  , 33  },
    { 106 , 77  , 33  },
    { 106 , 78  , 33  },
    { 106 , 79  , 34  },
    { 106 , 80  , 34  },
    { 106 , 81  , 34  },
    { 106 , 83  , 35  },
    { 106 , 84  , 35  },
    { 106 , 85  , 36  },
    { 106 , 86  , 36  },
    { 105 , 87  , 36  },
    { 105 , 88  , 37  },
    { 105 , 89  , 37  },
    { 105 , 91  , 38  },
    { 105 , 92  , 38  },
    { 105 , 93  , 39  },
    { 105 , 94  , 39  },
    { 105 , 95  , 40  },
    { 104 , 96  , 40  },
    { 104 , 98  , 40  },
    { 104 , 99  , 41  },
    { 104 , 100 , 41  },
    { 104 , 101 , 42  },
    { 103 , 102 , 42  },
    { 103 , 103 , 43  },
    { 103 , 104 , 44  },
    { 103 , 106 , 44  },
    { 103 , 107 , 45  },
    { 102 , 108 , 45  },
    { 102 , 109 , 46  },
    { 102 , 110 , 46  },
    { 102 , 111 , 47  },
    { 101 , 112 , 48  },
    { 101 , 114 , 48  },
    { 101 , 115 , 49  },
    { 101 , 116 , 50  },
    { 100 , 117 , 50  },
    { 100 , 118 , 51  },
    { 100 , 119 , 52  },
    { 100 , 120 , 52  },
    { 99  , 122 , 53  },
    { 99  , 123 , 54  },
    { 99  , 124 , 54  },
    { 98  , 125 , 55  },
    { 98  , 126 , 56  },
    { 98  , 127 , 57  },
    { 97  , 128 , 57  },
    { 97  , 130 , 58  },
    { 97  , 131 , 59  },
    { 96  , 132 , 60  },
    { 96  , 133 , 61  },
    { 96  , 134 , 61  },
    { 95  , 135 , 62  },
    { 95  , 136 , 63  },
    { 95  , 137 , 64  },
    { 94  , 139 , 65  },
    { 94  , 140 , 66  },
    { 94  , 141 , 67  },
    { 93  , 142 , 68  },
    { 93  , 143 , 69  },
    { 92  , 144 , 70  },
    { 92  , 145 , 71  },
    { 92  , 146 , 72  },
    { 91  , 148 , 73  },
    { 91  , 149 , 74  },
    { 90  , 150 , 75  },
    { 90  , 151 , 76  },
    { 89  , 152 , 77  },
    { 89  , 153 , 78  },
    { 89  , 154 , 79  },
    { 88  , 155 , 80  },
    { 88  , 157 , 81  },
    { 87  , 158 , 82  },
    { 87  , 159 , 83  },
    { 86  , 160 , 85  },
    { 86  , 161 , 86  },
    { 85  , 162 , 87  },
    { 85  , 163 , 88  },
    { 84  , 164 , 90  },
    { 84  , 165 , 91  },
    { 83  , 166 , 92  },
    { 83  , 168 , 93  },
    { 82  , 169 , 95  },
    { 82  , 170 , 96  },
    { 81  , 171 , 97  },
    { 81  , 172 , 99  },
    { 80  , 173 , 100 },
    { 80  , 174 , 102 },
    { 79  , 175 , 103 },
    { 79  , 176 , 104 },
    { 78  , 177 , 106 },
    { 77  , 178 , 107 },
    { 77  , 179 , 109 },
    { 76  , 180 , 110 },
    { 76  , 182 , 112 },
    { 75  , 183 , 114 },
    { 75  , 184 , 115 },
    { 74  , 185 , 117 },
    { 73  , 186 , 118 },
    { 73  , 187 , 120 },
    { 72  , 188 , 122 },
    { 71  , 189 , 123 },
    { 71  , 190 , 125 },
    { 70  , 191 , 127 },
    { 69  , 192 , 129 },
    { 69  , 193 , 130 },
    { 68  , 194 , 132 },
    { 67  , 195 , 134 },
    { 67  , 196 , 136 },
    { 66  , 197 , 138 },
    { 65  , 198 , 140 },
    { 65  , 199 , 142 },
    { 64  , 200 , 143 },
    { 63  , 201 , 145 },
    { 63  , 202 , 147 },
    { 62  , 203 , 149 },
    { 62  , 204 , 152 },
    { 63  , 204 , 154 },
    { 65  , 205 , 157 },
    { 66  , 206 , 160 },
    { 68  , 207 , 162 },
    { 70  , 207 , 165 },
    { 72  , 208 , 168 },
    { 73  , 209 , 170 },
    { 75  , 210 , 173 },
    { 77  , 210 , 176 },
    { 79  , 211 , 178 },
    { 81  , 212 , 181 },
    { 84  , 213 , 183 },
    { 86  , 213 , 186 },
    { 88  , 214 , 188 },
    { 90  , 215 , 191 },
    { 93  , 215 , 193 },
    { 95  , 216 , 195 },
    { 98  , 217 , 198 },
    { 100 , 218 , 200 },
    { 103 , 218 , 202 },
    { 105 , 219 , 205 },
    { 108 , 220 , 207 },
    { 111 , 221 , 209 },
    { 114 , 221 , 211 },
    { 116 , 222 , 213 },
    { 119 , 223 , 216 },
    { 122 , 224 , 218 },
    { 125 , 224 , 220 },
    { 129 , 225 , 222 },
    { 132 , 226 , 223 },
    { 135 , 227 , 225 },
    { 138 , 227 , 227 },
    { 142 , 228 , 229 },
    { 145 , 229 , 231 },
    { 148 , 230 , 232 },
    { 152 , 231 , 234 },
    { 156 , 232 , 236 },
    { 159 , 232 , 237 },
    { 163 , 233 , 239 },
    { 167 , 234 , 240 },
    { 170 , 235 , 241 },
    { 174 , 236 , 243 },
    { 178 , 237 , 244 },
    { 182 , 238 , 245 },
    { 186 , 239 , 246 },
    { 190 , 239 , 247 },
    { 194 , 240 , 248 },
    { 198 , 241 , 249 },
    { 202 , 242 , 250 },
    { 207 , 243 , 251 },
    { 211 , 244 , 251 },
    { 215 , 245 , 252 },
    { 219 , 246 , 253 },
    { 224 , 247 , 253 },
    { 228 , 248 , 254 },
    { 233 , 249 , 254 },
    { 237 , 251 , 254 },
    { 241 , 252 , 255 },
    { 246 , 253 , 255 },
    { 250 , 254 , 255 },
    { 255 , 255 , 255 },
};


bool apply_colormap(cv::InputArray src, cv::OutputArray dst, COLORMAP cmap)
{
  if( cmap != COLORMAP_NONE ) {

    static std::mutex mtx;

    switch (cmap) {
      case COLORMAP_GRAYS: {

        mtx.lock();

        static cv::Mat3b lut;

        if( lut.empty() ) {

          lut.create(256, 1);
          for( int i = 0; i < 256; ++i ) {
            lut[i][0] = cv::Vec3b(i, i, i);
          }
        }

        mtx.unlock();

        cv::applyColorMap(src, dst, lut);
        break;
      }

      case COLORMAP_LACERTA: {

        static cv::Mat3b lut(256, 1, (cv::Vec3b*) lacerta);
        cv::applyColorMap(src, dst, lut);

        break;
      }

      default:
        cv::applyColorMap(src, dst, cmap);
        break;
    }

    return true;
  }

  return false;
}
